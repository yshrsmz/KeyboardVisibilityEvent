// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'com.github.ben-manes.versions'

apply from: "${project.rootDir}/metadata.gradle"

buildscript {
    apply from: "${rootDir.absolutePath}/ext.gradle"

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.novoda:bintray-release:0.9.2' // https://github.com/novoda/bintray-release
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.33.0'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$kotlinVersion"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }

    tasks.withType(Javadoc) { failOnError false }
}

ext {
    metadata.version = VERSION_NAME
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

String shell(String command) {
    def proc = ["sh", "-c", "cd ${project.rootDir} ; ${command}"].execute()
    if (proc.waitFor() != 0) {
        throw new RuntimeException("Failed to run: ${command}\n${proc.err.text}")
    } else {
        def err = proc.err.text
        if (err) {
            System.err.println(err)
        }
    }
    return proc.in.text;
}

task releng {
    doLast {
        def tag = "v" + metadata.version
        println "Release engineering for ${tag}"

        def changes = shell "git status -s"
        if (changes.trim()) {
            throw new RuntimeException("There are changes not commited yet.\n${changes}")
        }

        println "> git tag ${tag}"
        shell "git tag ${tag}"
        println "> git push origin ${tag}"
        shell "git push origin ${tag}"
        shell "git push origin master"
    }
}

wrapper {
    gradleVersion = '5.6.4'
    //noinspection UnnecessaryQualifiedReference
    distributionType = Wrapper.DistributionType.ALL
}
